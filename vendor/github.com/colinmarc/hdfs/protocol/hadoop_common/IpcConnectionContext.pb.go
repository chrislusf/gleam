// Code generated by protoc-gen-go.
// source: IpcConnectionContext.proto
// DO NOT EDIT!

package hadoop_common

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// *
// Spec for UserInformationProto is specified in ProtoUtil#makeIpcConnectionContext
type UserInformationProto struct {
	EffectiveUser    *string `protobuf:"bytes,1,opt,name=effectiveUser" json:"effectiveUser,omitempty"`
	RealUser         *string `protobuf:"bytes,2,opt,name=realUser" json:"realUser,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserInformationProto) Reset()         { *m = UserInformationProto{} }
func (m *UserInformationProto) String() string { return proto.CompactTextString(m) }
func (*UserInformationProto) ProtoMessage()    {}

func (m *UserInformationProto) GetEffectiveUser() string {
	if m != nil && m.EffectiveUser != nil {
		return *m.EffectiveUser
	}
	return ""
}

func (m *UserInformationProto) GetRealUser() string {
	if m != nil && m.RealUser != nil {
		return *m.RealUser
	}
	return ""
}

// *
// The connection context is sent as part of the connection establishment.
// It establishes the context for ALL Rpc calls within the connection.
type IpcConnectionContextProto struct {
	// UserInfo beyond what is determined as part of security handshake
	// at connection time (kerberos, tokens etc).
	UserInfo *UserInformationProto `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
	// Protocol name for next rpc layer.
	// The client created a proxy with this protocol name
	Protocol         *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IpcConnectionContextProto) Reset()         { *m = IpcConnectionContextProto{} }
func (m *IpcConnectionContextProto) String() string { return proto.CompactTextString(m) }
func (*IpcConnectionContextProto) ProtoMessage()    {}

func (m *IpcConnectionContextProto) GetUserInfo() *UserInformationProto {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *IpcConnectionContextProto) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

func init() {
}
